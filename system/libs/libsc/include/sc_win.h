//sc_win.h
//Window-related system calls
//Bryan E. Topp <betopp@betopp.com> 2021
#ifndef _SC_WIN_H
#define _SC_WIN_H

//Rectangle packed into a single 64-bit value.
typedef uint64_t _sc_win_rect_t;
#define _SC_WIN_RECT(x, y, w, h) \
	( ((uint64_t)(x & 0xFFFF) <<  0) \
	| ((uint64_t)(y & 0xFFFF) << 16) \
	| ((uint64_t)(w & 0xFFFF) << 32) \
	| ((uint64_t)(h & 0xFFFF) << 48) )

//Flags that can be set on a window
//(0 should give a reasonable application window.)
typedef enum _sc_win_flag_e
{
	_SC_WIN_FLAG_HIDE    = 0x01,
	_SC_WIN_FLAG_NODECOR = 0x02,
	_SC_WIN_FLAG_RESIZE  = 0x04,		
} _sc_win_flag_t;

//Description of a window.
typedef struct _sc_win_parms_s
{
	//Description of the buffer that the userspace is maintaining.
	int buf_width; //Width, in pixels, of the window's buffer 
	int buf_height; //Height, in pixels, of the window's buffer
	int buf_bytespp; //Number of bytes per pixel in the window's buffer
	int buf_stride; //Stride, in bytes, between lines of the window's buffer
	
	//How the window should be displayed. Note: bytes/pixel and stride are always same as buffer.
	int img_width; //Width of contents in pixels
	int img_height; //Height of contents in pixels
	
	//Flags altering behavior of window
	_sc_win_flag_t flags;
	
} _sc_win_parms_t;

//Events that can be generated by a window.
typedef union _sc_win_evt_u
{
	uint32_t type;
	struct {
		int scancode;
		bool state;
	} kbd;
	struct {
		int relx;
		int rely;
	} mouse;
} _sc_win_evt_t;

//Makes a new window with the given description.
//Returns a descriptor number on success or a negative error number.
int _sc_win_new(const _sc_win_parms_t *parms_ptr, ssize_t parms_len);

//Updates the given window region.
//The buf_ptr points to the beginning of a buffer as described in _sc_win_parms_t.
//The buf_rect specifies the region in that buffer to update on the screen.
int _sc_win_up(int wind, const void *buf_ptr, _sc_win_rect_t buf_rect);

//Checks the event queue for the given window.
//Returns the original size of the event output, if any.
//Event data are truncated to the given buffer.
//Does not block; returns -EAGAIN if no events are available.
ssize_t _sc_win_evt(_sc_win_evt_t *evt_ptr, ssize_t evt_len);

#endif //_SC_WIN_H